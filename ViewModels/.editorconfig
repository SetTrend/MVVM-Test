# Rules in this file were initially inferred by Visual Studio IntelliCode from the D:\Documents\Visual Studio-Projekte\WPF\MVVM-Test\ViewModels\ codebase based on best match to current usage at 22.01.2021
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use hard tabs for indentation
indent_style = tab

#Formatting - new line options

#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true

#Formatting - spacing options

#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Style - expression bodied member options

#prefer expression-bodied members for constructors
csharp_style_expression_bodied_constructors = true:suggestion
#prefer expression-bodied members for methods
csharp_style_expression_bodied_methods = true:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,internal,protected,readonly,abstract:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion

# Abstrakte Basisklassen sollen mit einem vorangehenden Unterstrich benannt werden
dotnet_naming_symbols.abstract_base_classes.applicable_kinds = class
dotnet_naming_symbols.abstract_base_classes.applicable_accessibilities = private, protected, protected_internal, protected_friend, private_protected, local
dotnet_naming_symbols.abstract_base_classes.required_modifiers = abstract
dotnet_naming_style.abstract_base_classes.capitalization = pascal_case
dotnet_naming_style.abstract_base_classes.required_prefix = _

dotnet_naming_rule.abstract_base_classes.symbols = abstract_base_classes
dotnet_naming_rule.abstract_base_classes.style    = abstract_base_classes
dotnet_naming_rule.abstract_base_classes.severity = suggestion